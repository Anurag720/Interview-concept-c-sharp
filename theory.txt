What is C#?
so c# was developed by microsoft in 2000 when they are developing .net framework , c# run with .net framework and c# is oops based language similar to c++ or java mainly used for creating software components

C# VS C 
C# is based on oops and has modern features for software development and it required .net framework to execute 
on other hand C is procedural programming , it has pointers and can be excuted in cross plateform

* (.NET)
It is a software development plateform by microsoft , it provides tools and libraries that help developers build wide range of applications
.net includes runtime environment called Commom Language Runtime(CLR) that manages execute .net programs 

* (JIT)
Just in time compliation is a technique used by CLR for the optimisation and performance improvement of .NET applications
When you write code in a .NET language like C#, it's first compiled into an intermediate language called Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL). When you run your program, the JIT compiler converts this
CIL code into machine code that can be executed by the computer's CPU. This conversion happens just before the code is executed, hence the name "Just-In-Time."

* CLR (Common Language Runtime): The CLR is the runtime environment within .NET that manages the execution of .NET programs. It provides services like memory management, exception handling, security, and more. The CLR also includes the JIT compiler, 
which translates CIL code into machine code at runtime. It ensures that .NET programs can run on different platforms because it handles the low-level details of execution.

* CLI (Common Language Infrastructure): The CLI is a specification that defines the standards for creating and executing programs written in various .NET languages. It's not a programming language itself but a set of rules that languages like C# and 
Visual Basic follow. The key idea is that these languages compile into a common intermediate language (CIL/MSIL), which can be executed by any CLR that adheres to the CLI standards. 
This allows for language interoperability and portability across different platforms.

GARBAGE COLLECTION IN C#
Imagine your computer's memory as a big storage room where you keep things (data). When you run a program in C#, it uses this storage room to store information, like numbers, text, and other stuff.
Now, think of "garbage collection" as a helpful robot that goes around this storage room and checks if there are things you no longer need. If it finds something you're not using anymore (like an old piece of paper), it picks it up and throws it away to make room for new things you might need.
So, garbage collection in C# is like having a tidy robot that keeps your computer's memory organized. It helps you avoid clutter and ensures that your programs run smoothly without using up too much memory.

Here's how garbage collection helps:
Creating Objects: As your game runs, you create character objects in memory when new characters appear in the game. For example, you create an object for the main character, another for an enemy, and so on. These objects take up memory space.
No Longer Needed: As the game progresses, some characters may disappear or are no longer needed because they are defeated or go off-screen. When this happens, you no longer need those character objects.
Garbage Collection: Here's where garbage collection comes in. It's like a cleaning process that runs in the background. It periodically checks all the objects in memory to see if they are still being used or if they're no longer needed.
Removing Unused Objects: If the garbage collector finds character objects that are no longer needed (because they're not part of the game anymore), it will safely remove them from memory. This frees up the memory space they were occupying.

TYPES OF CLASSES IN C#
Abstract class
Partial claass
Sealed class
static class

=>Sealed class -In simple terms sealed class is used when we don't wanted futher derived class or child class, overall when we use sealed classs it cannot be inheritated
=>Abstract class - just like abstraction this class is used to create or provide a blueprint to other class, we direclty cannot creeated the objects from this , its structure is utilize by other inheritance class and then we can created object from that.
=>static class - When we made or declare class as satic then we cannot make its intances or ojects , we can simple call the member function , just like with functions, but cannot created objects or instances from it , all data members inside static class is declared by static keyword
=>Partial class - It is used when we wanted to use one file data into different files then we use partial class, if we declare class by partial then we can use class data into multiple files and all files combines into single file when application is complied 

Abstract vs Interface
Abstract Class:
Like a blueprint for a house that includes some pre-built rooms.
Can have both empty rooms (abstract methods) and furnished rooms (implemented methods).
Provides a foundation for related objects to build upon.

Interface:
Like a checklist of tasks without any instructions on how to do them.
Contains only tasks that objects must promise to do.
Used when different objects need to promise they can perform certain tasks, even if they're not related in any other way.


EXTENSION METHODS IN C#
It is concept that allow us to add new member in existing class without changing the original source code , we can implemented a new method in existing class without modification

Inheritance In C#
Concept of oops but in c# multiple inheritance is not supported means , we cannot inheritance a sub class by multiple base class overall it only support single inheritance
but it support multiple level Interface, use can use in place of that

MANAGED VS UNMANAGED code
a code is said to be managed when it run inside .net environment , in which memory handling, security , and other task are done by .net environment only
a unmanaged code is that which rrun outside the .net environment , and your're responsible for handling memory, security and other details directly, it provide more control but also more responsiblity and control

CLASS:
Class is a reference type.
Memory is allocated on the heap.
Supports inheritance.
Default constructor provided if not defined.
Can have methods, fields, properties, and events.
Supports access modifiers (public, private, etc.).
Used for more complex objects with behavior.

STRUCTURE (Struct):
Struct is a value type.
Memory is allocated on the stack.
Doesn't support inheritance.
Default constructor must be explicitly defined if needed.
Can have fields, properties, and methods (but no events).
Limited support for access modifiers (fields can't be protected or protected internal).
Used for lightweight data structures and simple objects.


ENUMS
 Enums in C# provide a way to group related values or options under a single, meaningful name. This makes your code more organized and easier to understand because you can use these named constants instead of using raw
  numbers or strings. Enums are a way to create a collection of related data elements with distinct names, making your code more readable and self-explanatory.

REF VS OUT VS this(Keyword)
 => In ref all value are passed by references , here all intilization and result  should also pass by ref keyword
 => In out all variable are passed by refernces,  but we have to only indicate results no need for intilization
 => in this when we created instance variable or class variable , and create a function which has same variable name then we use this keyworrd to diff. b/w them

DIFFERENT WAYS TO METHOD OVERLOAD IN C#
in c# method overloading allow to define multiple methods in same class with same name but different parameters, the complier determines which method to call baseed on number or types of arguments passed
* by parameters different types   -> public void Do(int a) -> public void Do(string a){}
* by different numbers of parameters -> public void Do(int a, int b)  ->public void Do(int a, int b, int c){}
* by different parameter order -> public void Do(string msg, int count)  -> public void Do(int count , string msg){}

BOXING VS UNBOXING
In c# mainly their are 3 data type Value (char,int) Reference (object) and pointers
= process of Converting value type to reference is called BOXING
= process of converting reference type to value type is called UNBOXING.

EARLYBINDING VS LATEBINDING
*earlybinding , is like computer figures out what to do with piece of code before actually doing ,it,s like knowing all the rules and steps before you start a task

CONSTANTS VS READ ONLY 
 = constants are like fixed values that never change, when we declare constant value , we cannot modified afterwards, like for maths constant, constants are determined at complie time 
 = read-only value are also once set cannot change and mainly evaluated at runtime when an object of class is created  
Constants: Values of constants are set at compile-time. They are determined and set when you write the code and remain fixed throughout the program's execution.
Read-Only Fields: Values of read-only fields are determined and set at runtime, typically during the creation of an object of a class that contains the read-only field. Once set, their values remain fixed for the lifetime of the object.

Jagged Arrays
it is like array inside array , array inside array of different length is stored in jagged array

String vs StringBuilder
 main difference between them is if we declare string then it is immutable means once created cannot we changed, any operation appers to modify string  actually created new string, good for text that does not change frequently , but memoery managment is not good
 on other hand string builder string is mutable, this makes more efficient for string manipulation, and it is memory efficient also 

COPY_TO() VS CLONE()
copy to is used to copies elements of one collection or array into another , and used to duplicate contents from one collection to another but doe'nt create new collection or object, can be helpful when we want to transfer elements b/w collections or need to create back'up
clone is used to created new objects that is copy of original objects , new object has separate instance then original, it duplicate objects + its references also

DISPOSE() VS FINALIZE()
dispose= it is used to free up the space and resources when object is done by use for cleaning 
In simple terms, Dispose is something you can call explicitly to release resources immediately when you're done with an object, while Finalize is a safety net provided by the garbage collector to clean up resources if you forget to call Dispose.
Finalize() is a method called by garbage collector during cleanup process.

DELEGATES
In simple terms, a delegate in C# is like a pointer to a method. It allows you to store a reference to a method and then call that method through the delegate. Think of it as a way to pass around and use functions just like you pass around and use variables. 
This can be handy when you want to provide a piece of code (a method) to be executed by another piece of code at a later time or under specific conditions. Delegates are often used for things like handling events, callbacks, and creating flexible, reusable code.

CONSTRUCTURE CHAINING 
it is a concept in oops where one constructor of class can call another constructor wihtin same class. It allows you to reuse code and set up object initialization in a more efficient and organized way. Constructor chaining is particularly useful when you have multiple 
constructors in a class with different sets of parameters but want to avoid duplicating initialization code.

GENERICS IN C#
In programming, generics let you create classes, methods, or interfaces that can work with different data types (like integers, strings, or custom objects) in a way that's both flexible and safe. This makes your code more efficient, reusable, and less error-prone

PUBLIC VS PRIVATE VS PRIVATE PROTECTED VS PROTECTED VS INTERNAL

Public: It's like leaving a door wide open. Everyone can access the element. No restrictions.
Private: It's like locking a door and keeping the key to yourself. Only the code within the same class can access the element.
Protected: It's like having a special key that you give to your family members. The element can be accessed within the class and by classes that inherit from it (like a child class).
Internal: It's like locking a door but allowing access to anyone inside the same building (assembly). The element can be accessed by code in the same assembly.
Protected Internal: It's like a combination of protected and internal. The element can be accessed within the same assembly and by classes that inherit from it (like a child class), even if they are in different assemblies.
Private Protected (C# 7.2 and later): It's like a combination of private and protected. The element can be accessed within the same class and by classes that inherit from it (like a child class) but only if they are in the same assembly.

HASH TABLES CLASS
The HashTable class in C# is like a smart container that stores data in pairs: a key and a value. It's similar to a dictionary where you can quickly find things (values) using their names (keys). The HashTable uses a special technique called 
hashing to make this search really fast, making it great for organizing and retrieving data efficiently.


SINGLETON
it is used when we only want one object of a class throughout , means it not allow to create mu;tiple instance or objects of a class.




